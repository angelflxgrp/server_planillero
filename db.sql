USE planillero;

-- 1. EMPRESAS
CREATE TABLE empresas (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 2. ROLES
CREATE TABLE roles (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  rol VARCHAR(50) NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 3. USUARIOS
CREATE TABLE usuarios (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  empresa_id INT DEFAULT NULL,
  nombre VARCHAR(100) NOT NULL,
  apellido VARCHAR(100) NOT NULL,
  correo_electronico VARCHAR(100) NOT NULL,
  password VARCHAR(255),
  created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  rol_id INT DEFAULT NULL,
  FOREIGN KEY (empresa_id) REFERENCES empresas(id),
  FOREIGN KEY (rol_id) REFERENCES roles(id)
);

CREATE TABLE horarios_empleados (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  empleado_id INT NOT NULL,
  dia_semana ENUM('lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado', 'domingo') NOT NULL,
  trabaja BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (empleado_id) REFERENCES usuarios(id) ON DELETE CASCADE
);

CREATE TABLE horas_laborales (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  tipo ENUM('diurna', 'nocturna') NOT NULL,
  hora_inicio TIME NOT NULL,
  hora_fin TIME NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);



-- 4. COMPANY JOBS
CREATE TABLE company_jobs (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  company_name VARCHAR(255) DEFAULT NULL,
  job_number INT DEFAULT NULL,
  job_description TEXT,
  created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 5. REGISTROS DIARIOS
CREATE TABLE registros_diarios (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  usuario_id INT NOT NULL,
  empresa_id INT NOT NULL,
  fecha DATE NOT NULL,
  turno ENUM('dia','noche') NOT NULL,
  fecha_inicio DATE NOT NULL,
  fecha_fin DATE NOT NULL,
  hora_entrada TIME DEFAULT NULL,
  hora_salida TIME DEFAULT NULL,
  horas_normales DECIMAL(5,2) DEFAULT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
  FOREIGN KEY (empresa_id) REFERENCES empresas(id)
);

-- 6. TAREAS REGISTRADAS (por día)
CREATE TABLE tareas_registradas (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  registro_id INT NOT NULL,
  descripcion_tarea JSON DEFAULT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (registro_id) REFERENCES registros_diarios(id) ON DELETE CASCADE
);

-- 7. TAREAS EXTRAS
CREATE TABLE tareas_extras (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  registro_id INT NOT NULL,
  descripcion TEXT NOT NULL,
  horas FLOAT DEFAULT NULL,
  job_id INT DEFAULT NULL,
  class_number VARCHAR(50) DEFAULT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (registro_id) REFERENCES registros_diarios(id) ON DELETE CASCADE,
  FOREIGN KEY (job_id) REFERENCES company_jobs(id)
);

-- 8. APROBACIONES
CREATE TABLE aprobaciones (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  registro_id INT NOT NULL,
  revisor_id INT NOT NULL,
  rol_revisor ENUM('supervisor','administrador') NOT NULL,
  estado ENUM('pendiente','aprobado','rechazado') DEFAULT 'pendiente',
  comentario TEXT,
  fecha_revision DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (registro_id) REFERENCES registros_diarios(id) ON DELETE CASCADE,
  FOREIGN KEY (revisor_id) REFERENCES usuarios(id)
);
